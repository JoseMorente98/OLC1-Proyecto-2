/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sintactico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[2,17],$V2=[1,17],$V3=[1,32],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,18],$Va=[1,22],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,24],$Vf=[1,23],$Vg=[2,5,18,19,23,26,38,39,40,41,42,55,60,70,71,72,77,92],$Vh=[1,39],$Vi=[1,42],$Vj=[18,23],$Vk=[2,27],$Vl=[1,53],$Vm=[1,54],$Vn=[1,64],$Vo=[1,65],$Vp=[1,57],$Vq=[1,56],$Vr=[1,59],$Vs=[1,62],$Vt=[1,63],$Vu=[1,60],$Vv=[1,61],$Vw=[1,58],$Vx=[1,86],$Vy=[1,82],$Vz=[1,85],$VA=[1,83],$VB=[1,84],$VC=[2,34],$VD=[1,105],$VE=[1,109],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[1,116],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[1,121],$VQ=[24,31,36,49,50,51,66,102,103,104,105,106,107,109,110],$VR=[2,179],$VS=[2,5,18,19,23,26,33,38,39,40,41,42,53,54,55,60,70,71,72,77,92],$VT=[2,5,18,19,23,26,33,38,39,40,41,42,53,54,55,58,60,70,71,72,77,92],$VU=[2,19,26,33,38,39,40,41,42,53,54,55,60,70,71,72,92],$VV=[1,137],$VW=[1,138],$VX=[1,150],$VY=[31,36,38,39,40,41,42],$VZ=[24,36],$V_=[1,186],$V$=[2,133],$V01=[1,193],$V11=[1,188],$V21=[1,187],$V31=[1,189],$V41=[1,190],$V51=[1,191],$V61=[1,192],$V71=[65,68],$V81=[24,31,36,49,50,66],$V91=[24,31,36,49,50,51,66,102,103,110],$Va1=[24,31,36,49,50,51,66,102,103,104,105,106,107,110],$Vb1=[24,31,36,49,50,51,66,102,103,106,107,110],$Vc1=[19,31,36,52,87,88,89,90,91],$Vd1=[1,255],$Ve1=[1,252],$Vf1=[1,253],$Vg1=[1,254],$Vh1=[1,276],$Vi1=[1,273],$Vj1=[1,275],$Vk1=[1,274],$Vl1=[2,19,33,38,39,40,41,42,53,54,55,60,70,71,72,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INICIO_INSTRUCCION":4,"EOF":5,"DECLARACION_TIPO":6,"DECLARACION_CLASE":7,"DECLARACION_VARIABLES":8,"ASIGNACION_VARIABLES":9,"SENTENCIA_IF":10,"SENTENCIA_WHILE":11,"SENTENCIA_DO_WHILE":12,"SENTENCIA_FOR":13,"SENTENCIA_SWITCH":14,"CONSOLA":15,"METODO_VOID":16,"DECLARACION_IMPORTE":17,"PR_class":18,"identificador":19,"BLOQUE_CLASE":20,"CLASE_IMPORTES":21,"IMPORT":22,"PR_import":23,"TK_PuntoComa":24,"TK_LlaveIzquierdo":25,"TK_LlaveDerecho":26,"TIPO_DATO":27,"VALOR":28,"TK_ParentesisIzquierdo":29,"PARAMETROS":30,"TK_ParentesisDerecho":31,"LISTA_INSTRUCCION_FUNCION":32,"PR_return":33,"ENUNCIADO":34,"TK_Igual":35,"TK_Coma":36,"MAS_ELEMENTOS":37,"PR_int":38,"PR_String":39,"PR_boolean":40,"PR_char":41,"PR_double":42,"MAS_PARAMETROS":43,"PARAMETRO":44,"DECLARACION_TIPO_FUNCION":45,"DECLARACION_VARIABLE_2":46,"LLAMADA_FUNCION":47,"ASIGNACION_VARIABLE_3":48,"TK_Adicion":49,"TK_Sustraccion":50,"TK_Multiplicacion":51,"TK_Entero":52,"PR_break":53,"PR_continue":54,"PR_if":55,"CONDICION_SENTENCIA":56,"BLOQUE_INSTRUCCIONES":57,"PR_else":58,"LISTA_INSTRUCCION":59,"PR_switch":60,"INSTRUCCION_SWITCH":61,"DEFAULT":62,"INSTRUCCION_CASES":63,"OPCION_CASE":64,"PR_case":65,"TK_DosPuntos":66,"LISTA_INSTRUCCION_SWITCH":67,"PR_default":68,"DECLARACION_TIPO_SWITCH":69,"PR_while":70,"PR_do":71,"PR_for":72,"INICIALIZACION":73,"TAMANO_PASO":74,"ASIGNACION_FOR":75,"DECLARACION_FOR":76,"PR_void":77,"PR_main":78,"DECLARACION_TIPO_METODO":79,"EXPRESION":80,"ERROR":81,"PARAMETROS_FUNCION":82,"ASIGNACION_VARIABLES2":83,"MAS_ELEMENTOS2":84,"PARAMETROS_POR_FUNCION":85,"PARAMETRO_FUNCION":86,"TK_Decimal":87,"TK_String":88,"TK_char":89,"PR_true":90,"PR_false":91,"PR_System":92,"TK_Punto":93,"PR_out":94,"CONSOLA_TIPO":95,"PR_print":96,"PR_println":97,"DECREMENTO_INCREMENTO":98,"++":99,"--":100,"TK_Modulo":101,"TK_Division":102,"TK_Potencia":103,"TK_Mayor":104,"TK_Menor":105,"==":106,"!=":107,"TK_Exclamacion":108,"||":109,"&&":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PR_class",19:"identificador",23:"PR_import",24:"TK_PuntoComa",25:"TK_LlaveIzquierdo",26:"TK_LlaveDerecho",29:"TK_ParentesisIzquierdo",31:"TK_ParentesisDerecho",33:"PR_return",35:"TK_Igual",36:"TK_Coma",38:"PR_int",39:"PR_String",40:"PR_boolean",41:"PR_char",42:"PR_double",49:"TK_Adicion",50:"TK_Sustraccion",51:"TK_Multiplicacion",52:"TK_Entero",53:"PR_break",54:"PR_continue",55:"PR_if",58:"PR_else",60:"PR_switch",65:"PR_case",66:"TK_DosPuntos",68:"PR_default",70:"PR_while",71:"PR_do",72:"PR_for",77:"PR_void",78:"PR_main",80:"EXPRESION",87:"TK_Decimal",88:"TK_String",89:"TK_char",90:"PR_true",91:"PR_false",92:"PR_System",93:"TK_Punto",94:"PR_out",96:"PR_print",97:"PR_println",99:"++",100:"--",101:"TK_Modulo",102:"TK_Division",103:"TK_Potencia",104:"TK_Mayor",105:"TK_Menor",106:"==",107:"!=",108:"TK_Exclamacion",109:"||",110:"&&"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[17,1],[17,0],[21,2],[21,1],[22,3],[20,3],[20,2],[8,4],[8,11],[28,2],[28,2],[28,0],[27,1],[27,1],[27,1],[27,1],[27,1],[30,1],[30,0],[43,2],[43,1],[44,2],[44,3],[32,2],[32,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,4],[45,4],[45,5],[45,2],[45,2],[45,1],[46,4],[9,4],[10,3],[10,5],[10,5],[56,3],[57,3],[57,2],[14,6],[61,1],[61,0],[63,2],[63,1],[64,6],[62,3],[67,2],[67,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,4],[69,4],[69,5],[69,2],[69,2],[69,1],[11,3],[12,5],[13,9],[73,1],[73,1],[76,4],[75,3],[74,3],[74,3],[74,3],[74,4],[16,7],[16,8],[59,2],[59,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,4],[79,4],[79,5],[79,2],[79,2],[79,2],[79,3],[79,1],[81,1],[81,1],[81,1],[81,1],[81,1],[48,4],[48,7],[37,2],[84,2],[84,0],[83,3],[83,1],[82,1],[82,0],[85,2],[85,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[86,2],[15,5],[95,5],[95,5],[47,5],[98,1],[98,1],[34,2],[34,2],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,4],[34,4],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Arbol($$[$0-1]); return this.$;
break;
case 2: case 18: case 35: case 39: case 67: case 71: case 101: case 134:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 19: case 36: case 40: case 68: case 72: case 102: case 135:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 33: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 65: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 91: case 92: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 132:
this.$ = $$[$0];
break;
case 14: case 55: case 87: case 119:
this.$ = new Excepcion($$[$0], "Este es un error sint√°ctico: " + $$[$0] + " en fila: " + (this._$.first_line) 
                                                    + ", columna: " +  this._$.first_column, this._$.first_line, this._$.first_column)
break;
case 15:
this.$ = new Clase($$[$0-1], $$[$0], $$[$0-3]);
break;
case 16: case 150:
 this.$ = $$[$0] 
break;
case 17:
 this.$ = [] 
break;
case 20:
this.$ = new Importe($$[$0-1],  this._$.first_line, this._$.first_column);
break;
case 21: case 61: case 62:
this.$ = $$[$0-1];
break;
case 22: case 34: case 52: case 63: case 66: case 84: case 98: case 114: case 133:
this.$ = [];
break;
case 23: case 56:
this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 24:
this.$ = new Funcion($$[$0-10], $$[$0-9], $$[$0-7], $$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 25: case 154: case 155:
this.$ = $$[$0]
break;
case 26: case 27:
this.$ = null;
break;
case 28:
this.$ = new TipoDato('PR_int');
break;
case 29:
this.$ = new TipoDato('string');
break;
case 30:
this.$ = new TipoDato('PR_boolean');
break;
case 31:
this.$ = new TipoDato('PR_char');
break;
case 32:
this.$ = new TipoDato('PR_double');
break;
case 37: case 38:
this.$ = new Declaracion($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column);  
break;
case 50: case 82: case 112:
this.$ = new Incremento($$[$0-3], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 51: case 83: case 113:
this.$ = new Decremento($$[$0-3], $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 53: case 115:
this.$ = new Break($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 54: case 85: case 116:
this.$ = new Continue($$[$0-1], this._$.first_line, this._$.first_column);
break;
case 57: case 125:
this.$ = new Asignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 58:
this.$ = new SentenciaIf($$[$0-1], $$[$0], [], this._$.first_line, this._$.first_column);
break;
case 59:
this.$ = new SentenciaIf($$[$0-3], $$[$0-2], [new Else($$[$0],this._$.first_line, this._$.first_column)], this._$.first_line, this._$.first_column);
break;
case 60:
this.$ = new SentenciaIf($$[$0-3], $$[$0-2], [$$[$0]], this._$.first_line, this._$.first_column);
break;
case 64:
this.$ = new SentenciaSwitch($$[$0-4], $$[$0-2], [$$[$0-1]], this._$.first_line, this._$.first_column);
break;
case 69:
this.$ = new Case($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 70:
this.$ = new Default($$[$0], this._$.first_line, this._$.first_column);
break;
case 86: case 117:
this.$ = new Retorno( $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 88:
this.$ = new SentenciaWhile($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 89:
this.$ = new SentenciaDoWhile($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 90:
this.$ = new SentenciaFor($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 93:
this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 94: case 130:
this.$ = new Asignacion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 95:
this.$ = new Incremento($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 96:
this.$ = new Decremento($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 97:
this.$ = new Paso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 99:
this.$ = new Metodo('PR_void', 'PR_main', [], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 100:
this.$ = new Metodo('PR_void', $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 118:
this.$ = new Retorno( $$[$0-2], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 126:
this.$ = new Asignacion($$[$0-6], $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 131:
this.$ = new Asignacion($$[$0], null, this._$.first_line, this._$.first_column);
break;
case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149:
this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column);  
break;
case 151: case 152:
this.$ = new Imprimir($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 153:
this.$ = new LlamadaFuncion($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column);
break;
case 156: case 157:
 this.$ = new ExpresionAritmetica($$[$0-1], null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 158:
 this.$ = new ExpresionAritmetica($$[$0-1], null, 'TK_Sustraccion', this._$.first_line, this._$.first_column); 
break;
case 159:
 this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], 'TK_Adicion', this._$.first_line, this._$.first_column); 
break;
case 160:
 this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], 'TK_Sustraccion', this._$.first_line, this._$.first_column); 
break;
case 161:
 this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], 'TK_Multiplicacion', this._$.first_line, this._$.first_column); 
break;
case 162:
 this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], 'TK_Division', this._$.first_line, this._$.first_column); 
break;
case 163:
 this.$ = new ExpresionAritmetica($$[$0-2], $$[$0], 'TK_Potencia', this._$.first_line, this._$.first_column); 
break;
case 164:
 this.$ = new ExpresionRelacional($$[$0-3], $$[$0], 'TK_Mayor' + 'TK_Igual',this._$.first_line, this._$.first_column); 
break;
case 165:
 this.$ = new ExpresionRelacional($$[$0-3], $$[$0], 'TK_Menor' + 'TK_Igual', this._$.first_line, this._$.first_column); 
break;
case 166:
 this.$ = new ExpresionRelacional($$[$0-2], $$[$0], 'TK_Menor', this._$.first_line, this._$.first_column); 
break;
case 167:
 this.$ = new ExpresionRelacional($$[$0-2], $$[$0], 'TK_Mayor', this._$.first_line, this._$.first_column); 
break;
case 168:
 this.$ = new ExpresionRelacional($$[$0-2], $$[$0], '==', this._$.first_line, this._$.first_column); 
break;
case 169:
 this.$ = new ExpresionRelacional($$[$0-2], $$[$0], '!=', this._$.first_line, this._$.first_column); 
break;
case 170:
 this.$ = new ExpresionLogica($$[$0], null, 'TK_Exclamacion', this._$.first_line, this._$.first_column); 
break;
case 171:
 this.$ = new ExpresionLogica($$[$0-2], $$[$0], '||', this._$.first_line, this._$.first_column); 
break;
case 172:
 this.$ = new ExpresionLogica($$[$0-2], $$[$0], '&&', this._$.first_line, this._$.first_column); 
break;
case 173:
 this.$ = new Expresion(new TipoDato('PR_double'), Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 174:
 this.$ = new Expresion(new TipoDato('PR_int'), Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 175:
 this.$ = new Expresion(new TipoDato('PR_boolean'), true, this._$.first_line, this._$.first_column); 
break;
case 176:
 this.$ = new Expresion(new TipoDato('PR_boolean'), false, this._$.first_line, this._$.first_column); 
break;
case 177:
 this.$ = new Expresion(new TipoDato('string'), $$[$0].replace(/\"/g,""), this._$.first_line, this._$.first_column); 
break;
case 178:
 this.$ = new Expresion(new TipoDato('PR_char'), $$[$0].replace(/\'/g,""), this._$.first_line, this._$.first_column); 
break;
case 179:
 this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column); 
break;
case 180:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:$V1,19:$V2,21:25,22:31,23:$V3,27:16,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,77:$Ve,92:$Vf},{1:[3]},{2:$V0,5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:$V1,19:$V2,21:25,22:31,23:$V3,27:16,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,77:$Ve,92:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{18:[1,35]},{19:[1,36]},{35:[1,37]},{29:$Vh,56:38},{29:$Vh,56:40},{25:$Vi,57:41},{29:[1,43]},{29:$Vh,56:44},{93:[1,45]},{19:[1,47],78:[1,46]},{18:[2,16],22:48,23:$V3},{19:[2,28]},{19:[2,29]},{19:[2,30]},{19:[2,31]},{19:[2,32]},o($Vj,[2,19]),{19:[1,49]},{1:[2,1]},o($Vg,[2,2]),{19:[1,50]},{24:$Vk,28:51,29:[1,52],35:$Vl,36:$Vm},{19:$Vn,29:$Vo,34:55,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{25:$Vi,57:66},{19:$Vn,29:$Vo,34:67,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{25:$Vi,57:68},{70:[1,69]},{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,26:[1,71],27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,59:70,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:72,92:$Vf},{19:[1,91],27:92,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,73:88,75:89,76:90},{25:[1,93]},{94:[1,94]},{29:[1,95]},{29:[1,96]},o($Vj,[2,18]),{24:[1,97]},{20:98,25:[1,99]},{24:[1,100]},{27:104,30:101,31:$VC,36:$VD,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:102,44:103},{19:$Vn,29:$Vo,34:106,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$VE,37:107,83:108},{24:[1,110],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},o($VQ,[2,174],{98:123,99:[1,124],100:[1,125],101:[1,122]}),{19:$Vn,29:$Vo,34:126,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:127,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($VQ,[2,173]),o($VQ,[2,175]),o($VQ,[2,176]),o($VQ,[2,177]),o($VQ,[2,178]),o($VQ,$VR),{19:$Vn,29:$Vo,34:128,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($VS,[2,58],{58:[1,129]}),{31:[1,130],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},o($VS,[2,88]),{29:$Vh,56:131},{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,26:[1,132],27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:133,92:$Vf},o($VT,[2,63]),o($VU,[2,102]),o($VU,[2,103]),o($VU,[2,104]),o($VU,[2,105]),o($VU,[2,106]),o($VU,[2,107]),o($VU,[2,108]),o($VU,[2,109]),o($VU,[2,110]),o($VU,[2,111]),{29:$VV,35:$VW,49:[1,134],50:[1,135],51:[1,136]},{24:[1,139]},{24:[1,140]},{24:[1,141],80:[1,142]},o($VU,[2,119]),{19:[1,143]},{24:[1,144]},{24:[2,91]},{24:[2,92]},{35:[1,145]},{19:[1,146]},{61:147,63:148,64:149,65:$VX,68:[2,66]},{93:[1,151]},{31:[1,152]},{27:104,30:153,31:$VC,36:$VD,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:102,44:103},o($Vj,[2,20]),o($Vg,[2,15]),{2:$V0,4:154,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:$V1,19:$V2,21:25,22:31,23:$V3,26:[1,155],27:16,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,77:$Ve,92:$Vf},o($Vg,[2,23]),{31:[1,156]},{27:104,31:[2,33],36:$VD,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,44:157},o($VY,[2,36]),{19:[1,158]},{27:159,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8},{24:[2,25],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},{24:[2,26]},{24:[2,129],36:[1,161],84:160},o($VZ,[2,131],{35:[1,162]}),o($Vg,[2,57]),{19:$Vn,29:$Vo,34:163,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:164,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:165,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:166,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:167,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:169,35:[1,168],50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:171,35:[1,170],50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:172,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:173,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:174,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:175,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($VQ,[2,156]),o($VQ,[2,157]),o($VQ,[2,154]),o($VQ,[2,155]),o($VQ,[2,158]),o($VQ,[2,170]),{31:[1,176],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},{10:178,25:$Vi,55:$V9,57:177},o([24,25],[2,61]),{24:[1,179]},o($VT,[2,62]),o($VU,[2,101]),{49:[1,180]},{50:[1,181]},{50:[1,182]},{19:$V_,31:$V$,36:$V01,52:$V11,82:183,85:184,86:185,87:$V21,88:$V31,89:$V41,90:$V51,91:$V61},{19:[1,195],29:$Vo,34:194,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($VU,[2,115]),o($VU,[2,116]),o($VU,[2,117]),{24:[1,196]},{24:$Vk,28:197,35:$Vl,36:$Vm},{19:$Vn,29:$Vo,34:198,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:199,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{35:[1,200]},{62:201,68:[1,202]},{64:203,65:$VX,68:[2,65]},o($V71,[2,68]),{19:$Vn,29:$Vo,34:204,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{95:205,96:[1,206],97:[1,207]},{25:[1,208]},{31:[1,209]},{2:$V0,6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:15,18:$V1,19:$V2,21:25,22:31,23:$V3,26:[1,210],27:16,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,77:$Ve,92:$Vf},o($Vg,[2,22]),{25:[1,211]},o($VY,[2,35]),o($VY,[2,37]),{19:[1,212]},{24:[2,127]},{19:$VE,37:213,83:108},{19:$Vn,29:$Vo,34:214,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($V81,[2,159],{51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP}),o($V81,[2,160],{51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP}),o($V91,[2,161],{104:$VK,105:$VL,106:$VM,107:$VN,109:$VO}),o($V91,[2,162],{104:$VK,105:$VL,106:$VM,107:$VN,109:$VO}),o($V91,[2,163],{104:$VK,105:$VL,106:$VM,107:$VN,109:$VO}),{19:$Vn,29:$Vo,34:215,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($Va1,[2,167],{109:$VO}),{19:$Vn,29:$Vo,34:216,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($Va1,[2,166],{109:$VO}),o($Vb1,[2,168],{104:$VK,105:$VL,109:$VO}),o($Vb1,[2,169],{104:$VK,105:$VL,109:$VO}),o($VQ,[2,171]),o([24,31,36,49,50,66,110],[2,172],{51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO}),o($VQ,[2,180]),o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,89]),{24:[1,217]},{24:[1,218]},{24:[1,219]},{31:[1,220]},{19:$V_,31:[2,132],36:$V01,52:$V11,86:221,87:$V21,88:$V31,89:$V41,90:$V51,91:$V61},o($Vc1,[2,135]),o($Vc1,[2,136]),o($Vc1,[2,137]),o($Vc1,[2,138]),o($Vc1,[2,139]),o($Vc1,[2,140]),o($Vc1,[2,141]),o($Vc1,[2,142]),{19:[1,222],52:[1,224],87:[1,223],88:[1,225],89:[1,226],90:[1,227],91:[1,228]},{24:[1,229],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},o([24,49,50,51,102,103,104,105,106,107,109,110],$VR,{29:[1,230]}),o($VU,[2,118]),{24:[1,231]},{24:[1,232],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},{24:[2,94],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},{19:$Vn,29:$Vo,34:233,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{26:[1,234]},{66:[1,235]},o($V71,[2,67]),{49:$VF,50:$VG,51:$VH,66:[1,236],102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},o($VS,[2,150]),{29:[1,237]},{29:[1,238]},{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,59:239,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:72,92:$Vf},{25:[1,240]},o($Vg,[2,21]),{2:$Vd1,10:246,11:247,12:248,13:250,14:251,15:249,19:$Ve1,27:87,32:241,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,45:242,46:243,47:244,48:245,53:$Vf1,54:$Vg1,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,92:$Vf},o($VY,[2,38]),{24:[2,128]},o($VZ,[2,130],{49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP}),o($Va1,[2,164],{109:$VO}),o($Va1,[2,165],{109:$VO}),o($VU,[2,112]),o($VU,[2,113]),{52:[1,256]},{24:[1,257]},o($Vc1,[2,134]),o($Vc1,[2,143]),o($Vc1,[2,144]),o($Vc1,[2,145]),o($Vc1,[2,146]),o($Vc1,[2,147]),o($Vc1,[2,148]),o($Vc1,[2,149]),o($VU,[2,125]),{19:$V_,31:$V$,36:$V01,52:$V11,82:258,85:184,86:185,87:$V21,88:$V31,89:$V41,90:$V51,91:$V61},o($VU,[2,56]),{19:[1,260],74:259},{24:[2,93],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},o($VS,[2,64]),{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,59:261,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:72,92:$Vf},{2:$Vh1,10:267,11:268,12:269,13:271,14:272,15:270,19:$Vi1,27:87,33:$Vj1,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:264,47:265,48:266,54:$Vk1,55:$V9,60:$Va,67:262,69:263,70:$Vb,71:$Vc,72:$Vd,92:$Vf},{19:$Vn,29:$Vo,34:277,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{19:$Vn,29:$Vo,34:278,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,26:[1,279],27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:133,92:$Vf},{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,59:280,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:72,92:$Vf},{2:$Vd1,10:246,11:247,12:248,13:250,14:251,15:249,19:$Ve1,27:87,33:[1,281],38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,45:282,46:243,47:244,48:245,53:$Vf1,54:$Vg1,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,92:$Vf},o($Vl1,[2,40]),o($Vl1,[2,41]),o($Vl1,[2,42]),o($Vl1,[2,43]),o($Vl1,[2,44]),o($Vl1,[2,45]),o($Vl1,[2,46]),o($Vl1,[2,47]),o($Vl1,[2,48]),o($Vl1,[2,49]),{29:$VV,35:$VW,49:[1,283],50:[1,284],51:[1,285]},{24:[1,286]},{24:[1,287]},o($Vl1,[2,55]),o($VU,[2,114]),o($VU,[2,153]),{31:[1,288]},{31:[1,289]},{35:[1,292],49:[1,290],50:[1,291],51:[1,293]},{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,26:[2,70],27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:133,92:$Vf},{2:$Vh1,10:267,11:268,12:269,13:271,14:272,15:270,19:$Vi1,27:87,33:$Vj1,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:264,47:265,48:266,53:[1,294],54:$Vk1,55:$V9,60:$Va,69:295,70:$Vb,71:$Vc,72:$Vd,92:$Vf},o($Vl1,[2,72]),o($Vl1,[2,73]),o($Vl1,[2,74]),o($Vl1,[2,75]),o($Vl1,[2,76]),o($Vl1,[2,77]),o($Vl1,[2,78]),o($Vl1,[2,79]),o($Vl1,[2,80]),o($Vl1,[2,81]),{29:$VV,35:$VW,49:[1,296],50:[1,297],51:[1,298]},{24:[1,299]},{24:[1,300]},o($Vl1,[2,87]),{31:[1,301],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},{31:[1,302],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},o($Vg,[2,99]),{2:$Vx,10:76,11:77,12:78,13:80,14:81,15:79,19:$Vy,26:[1,303],27:87,33:$Vz,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,46:73,47:74,48:75,53:$VA,54:$VB,55:$V9,60:$Va,70:$Vb,71:$Vc,72:$Vd,79:133,92:$Vf},{19:$Vn,29:$Vo,34:304,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},o($Vl1,[2,39]),{49:[1,305]},{50:[1,306]},{50:[1,307]},o($Vl1,[2,53]),o($Vl1,[2,54]),{24:[1,308]},{25:$Vi,57:309},{49:[1,310]},{50:[1,311]},{19:$Vn,29:$Vo,34:312,50:$Vp,52:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,108:$Vw},{50:[1,313]},{24:[1,314]},o($Vl1,[2,71]),{49:[1,315]},{50:[1,316]},{50:[1,317]},o($Vl1,[2,85]),o($Vl1,[2,86]),{24:[1,318]},{24:[1,319]},o($Vg,[2,100]),{24:[1,320],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},{24:[1,321]},{24:[1,322]},{24:[1,323]},o($VU,[2,126]),o($VS,[2,90]),{31:[2,95]},{31:[2,96]},{31:[2,97],49:$VF,50:$VG,51:$VH,102:$VI,103:$VJ,104:$VK,105:$VL,106:$VM,107:$VN,109:$VO,110:$VP},{52:[1,324]},o($V71,[2,69]),{24:[1,325]},{24:[1,326]},{24:[1,327]},o($VS,[2,151]),o($VS,[2,152]),{26:[1,328]},o($Vl1,[2,50]),o($Vl1,[2,51]),{52:[1,329]},{31:[2,98]},o($Vl1,[2,82]),o($Vl1,[2,83]),{52:[1,330]},o($Vg,[2,24]),o($Vl1,[2,52]),o($Vl1,[2,84])],
defaultActions: {26:[2,28],27:[2,29],28:[2,30],29:[2,31],30:[2,32],33:[2,1],89:[2,91],90:[2,92],107:[2,26],160:[2,127],213:[2,128],310:[2,95],311:[2,96],324:[2,98]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const {Asignacion} = require('../ast/asignacion.ast');
const {Break} = require('../ast/break.ast');
const {Case} = require('../ast/case.ast');
const {Clase} = require('../ast/clase.ast');
const {Continue} = require('../ast/continue.ast');
const {Declaracion} = require('../ast/declaracion.ast');
const {Decremento} = require('../ast/decremento.ast');
const {Default} = require('../ast/default.ast');
const {Else} = require('../ast/else.ast');
const {Excepcion} = require('../ast/excepcion.ast');
const {Expresion} = require('../ast/expresion.ast');
const {ExpresionAritmetica} = require('../ast/expresion-aritmetica.ast');
const {ExpresionLogica} = require('../ast/expresion-logica.ast');
const {ExpresionRelacional} = require('../ast/expresion-relacional.ast');
const {Identificador} = require('../ast/Identificador.ast');
const {Importe} = require('../ast/import.ast');
const {Imprimir} = require('../ast/imprimir.ast');
const {Incremento} = require('../ast/incremento.ast');
const {LlamadaFuncion} = require('../ast/llamada.ast');
const {Metodo} = require('../ast/metodo.ast');
const {Funcion} = require('../ast/funcion.ast');
const {Retorno} = require('../ast/retorno.ast');
const {SentenciaDoWhile} = require('../ast/sentencia-do-while.ast');
const {SentenciaFor} = require('../ast/sentencia-for.ast');
const {SentenciaIf} = require('../ast/sentencia-if.ast');
const {SentenciaSwitch} = require('../ast/sentencia-switch.ast');
const {SentenciaWhile} = require('../ast/sentencia-while.ast');
const {TipoDato} = require('../ast/tipo-dato.ast');    
const {Paso} = require('../ast/paso.ast');    
const {Arbol} = require('../ast/arbol.ast');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 51
break;
case 6:return 102
break;
case 7:return 101
break;
case 8:return 50
break;
case 9:return 103
break;
case 10:return 49
break;
case 11:return 24
break;
case 12:return 66
break;
case 13:return 93
break;
case 14:return 105
break;
case 15:return 104
break;
case 16:return 108
break;
case 17:return 35
break;
case 18:return 36
break;
case 19:return 29
break;
case 20:return 31  
break;
case 21:return 'TK_CorcheteIzquierdo'
break;
case 22:return 'TK_CorcheteDerecho'
break;
case 23:return 25
break;
case 24:return 26
break;
case 25:return 106
break;
case 26:return 107
break;
case 27:return 99
break;
case 28:return 100
break;
case 29:return 109
break;
case 30:return 110
break;
case 31:return 23
break;
case 32:return 18
break;
case 33:return 92
break;
case 34:return 94  
break;
case 35:return 97  
break;
case 36:return 96
break;
case 37:return 72  
break;
case 38:return 55
break;
case 39:return 58
break;
case 40:return 60
break;
case 41:return 68
break;
case 42:return 65
break;
case 43:return 71
break;
case 44:return 70
break;
case 45:return 53
break;
case 46:return 54
break;
case 47:return 33
break;
case 48:return 90
break;
case 49:return 91
break;
case 50:return 78
break;
case 51:return 77 
break;
case 52:return 40
break;
case 53:return 41
break;
case 54:return 42
break;
case 55:return 38
break;
case 56:return 39
break;
case 57:return 19
break;
case 58:return 87;
break;
case 59:return 52;
break;
case 60:return 88;
break;
case 61:return 88;
break;
case 62:return 89;
break;
case 63:yy_.yytext = yy_.yytext.replace(/^\\/g,''); return 89;
break;
case 64:yy_.yytext = yy_.yytext.replace(/\\'/g,"'"); return 89;
break;
case 65:return 5
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:-)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:import\b)/i,/^(?:class\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:void\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_]*))/i,/^(?:(((0|([1-9])([0-9])*))\.((0|([1-9])([0-9])*))?(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|\.((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))[fFdD]?|((0|([1-9])([0-9])*))(([Ee][+-]?((0|([1-9])([0-9])*))))?[fFdD])(?=([^\w]|$)))/i,/^(?:((0|([1-9])([0-9])*)))/i,/^(?:"")/i,/^(?:"([^"]|(\\.))*")/i,/^(?:\\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}))/i,/^(?:\\.)/i,/^(?:'(\\\\|\\'|[^'])*')/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = sintactico;
exports.Parser = sintactico.Parser;
exports.parse = function () { return sintactico.parse.apply(sintactico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}